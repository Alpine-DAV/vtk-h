###############################################################################
# Ascent CI Checks
###############################################################################
# Ref:
# https://aka.ms/yaml

# VTK-h ci tests

# only build merge target pr to develop
trigger: none
pr:
  branches:
    include:
    - develop

# fast fail sanity checks
stages:
- stage: Sanity
  jobs:
  - job: BLT_Time_Travel_Check
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
      - checkout: self
        clean: boolean
        submodules: recursive

      - script: |
          #######################################
          # run our sanity check script
          #######################################
          git fetch
          python scripts/ci/check_blt_time_travel.py 
        displayName: 'BLT Time Travel Check'

# main checks
- stage: Main
  jobs:  
  ###############################################################################
  # Ubuntu build and test, using spack to build tpls
  ###############################################################################
  - job: Ubuntu_16
    pool:
      vmImage: 'ubuntu-16.04'
    timeoutInMinutes: 0
    variables:
      COMPILER_CC: gcc-5
      COMPILER_CXX: g++-5
      COMPILER_FC: gfortran-5
    strategy:
      matrix:
        shared:
          BUILD_SHARED_LIBS: ON
          CMAKE_BUILD_TYPE: Debug
        static:
          BUILD_SHARED_LIBS: OFF
          CMAKE_BUILD_TYPE: Debug
    steps:
      - checkout: self
        clean: boolean
        submodules: recursive

      - script: |
           ##################
           # setup build env
           ##################
           # output env
           cat etc/*rel*
           env
           # clean default paths
           sudo rm -rf /usr/local/lib/android/
           sudo rm -rf /usr/share/miniconda/
           # add extra repo and update
           sudo add-apt-repository ppa:ubuntu-toolchain-r/test
           sudo apt-get update
           # list pkgs we need
           export APT_PKGS=binutils
           export APT_PKGS="$APT_PKGS gcc-5"
           export APT_PKGS="$APT_PKGS g++-5"
           export APT_PKGS="$APT_PKGS gfortran-5"
           export APT_PKGS="$APT_PKGS openmpi-bin"
           export APT_PKGS="$APT_PKGS libopenmpi-dev"
           export APT_PKGS="$APT_PKGS libncurses-dev"
           export APT_PKGS="$APT_PKGS libssl-dev"
           export APT_PKGS="$APT_PKGS zlib1g-dev"
           # install pkgs we need
           sudo apt-get -y install $APT_PKGS
        displayName: 'Prepare build env'

      - script: |
           #################################
           # run uber to build tpls
           #################################
           #
           pwd
           # echo system python details
           which python
           python --version
           # setup spack spec
           export SPACK_SPEC="%gcc@5+mpi ^cmake@3.14.5"
           echo $SPACK_SPEC
           # run uber to build tpls
           python scripts/uberenv/uberenv.py --pull --spec "${SPACK_SPEC}" --spack-config-dir=scripts/uberenv/spack_configs/ci/ubuntu_16/
        displayName: 'Spack Build Tpls'

      - script: |
           #################################
           # configure
           #################################
           # setup compiler env vars
           export CC=${COMPILER_CC}
           export CXX=${COMPILER_CXX}
           export FC=${COMPILER_FC}
           ${CC} --version
           # capture current path
           export ROOT_DIR=`pwd`
           # find spack generated host config file
           export HOST_CONFIG=`ls ${ROOT_DIR}/uberenv_libs/*.cmake`
           echo $HOST_CONFIG
           # find spack installed cmake
           export CMAKE_BIN_DIR=`ls -d ${ROOT_DIR}/uberenv_libs/spack/opt/spack/*/*/cmake*/bin`
           export PATH=${CMAKE_BIN_DIR}:$PATH
           echo $PATH
           which cmake
           cmake --version
           # prepare build dir
           mkdir build
           cd build
           # setup cmake options
           export CMAKE_OPTS="-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}"
           export CMAKE_OPTS="${CMAKE_OPTS} -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}"
           export CMAKE_OPTS="${CMAKE_OPTS} -DCMAKE_INSTALL_PREFIX=../install"
           # configure
           cmake ${CMAKE_OPTS} -C ${HOST_CONFIG} ../src
        displayName: 'Configure with CMake'

      - script: |
           #################################
           # build
           #################################
           # build
           cd build
           make VERBOSE=1
        displayName: 'Build'

      - script: |
           #################################
           # test
           #################################
           # find spack installed cmake
           export ROOT_DIR=`pwd`
           export CMAKE_BIN_DIR=`ls -d ${ROOT_DIR}/uberenv_libs/spack/opt/spack/*/*/cmake*/bin`
           export PATH=${CMAKE_BIN_DIR}:$PATH
           which ctest
           cd build
           # run ctest
           ctest -T test --output-on-failure -V
        displayName: 'Run Unit Tests'

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'cTest'
          testResultsFiles: '**/Test.xml'
        displayName: 'Unit Test Results'
        condition: always()

      - script: |
           #################################
           # install
           #################################
           cd build
           make install
        displayName: 'Install'

      - script: |
          ###########################
          # using with cmake example
          ###########################
          pwd
          ls -l
          # find spack installed cmake
          export ROOT_DIR=`pwd`
          export CMAKE_BIN_DIR=`ls -d ${ROOT_DIR}/uberenv_libs/spack/opt/spack/*/*/cmake*/bin`
          export PATH=${CMAKE_BIN_DIR}:$PATH
          echo $PATH
          which cmake
          export VTKM_DIR=`ls -d ${ROOT_DIR}/uberenv_libs/spack/opt/spack/*/*/vtkm*`
          export VTKH_DIR=${ROOT_DIR}/install
          cd install/examples/vtk-h/using-with-cmake
          mkdir _test_build
          cd _test_build
          export EXAMPLE_CFG="-DVTKM_DIR=${VTKM_DIR} -DVTKH_DIR=${VTKH_DIR}"
          echo $EXAMPLE_CFG
          cmake ${EXAMPLE_CFG} ../
          make VERBOSE=1
          ./example
        displayName: 'Test vs Install (using-with-cmake)'

  ###############################################################################
  # NVCC Linux build and install, using spack to build tpls
  ###############################################################################
  - job: Ubuntu_Cuda
    pool:
      vmImage: 'ubuntu-16.04'
    container: alpinedav/ascent-ci:cuda-9.2-dev
    timeoutInMinutes: 0
    strategy:
      matrix:
        static_vtkh:
          BUILD_SHARED_LIBS: OFF
          CMAKE_BUILD_TYPE: Debug
    steps:
      - checkout: self
        clean: boolean
        submodules: recursive

      - script: |
           #################################
           # setup build env
           #################################
           # output env
           cat etc/*rel*
           env
           whoami
           sudo apt-get update
           # list pkgs we need
           export APT_PKGS=git
           export APT_PKGS="$APT_PKGS python"
           export APT_PKGS="$APT_PKGS gfortran"
           export APT_PKGS="$APT_PKGS openmpi-bin"
           export APT_PKGS="$APT_PKGS libopenmpi-dev"
           export APT_PKGS="$APT_PKGS zlib1g-dev"
           export APT_PKGS="$APT_PKGS curl"
           # install pkgs we need
           sudo apt-get -y install $APT_PKGS
        displayName: 'Prepare build env'

      - script: |
           #################################
           # run uber to build tpls
           #################################
           # echo system python details
           which python
           python --version
           # setup spack spec (must be static)
           export SPACK_SPEC="%gcc+mpi+cuda~openmp~shared"
           export SPACK_SPEC="${SPACK_SPEC}${SPACK_SHARED_VARIANT} ^vtkm+cuda${SPACK_SHARED_VARIANT}"
           export SPACK_SPEC="${SPACK_SPEC} ^cmake~openssl~ncurses"
           echo $SPACK_SPEC
           # run uber to build tpls
           python scripts/uberenv/uberenv.py --pull --spec "${SPACK_SPEC}" --spack-config-dir=scripts/uberenv/spack_configs/ci/ubuntu_cuda/
        displayName: 'Spack Build Tpls'

      - script: |
           #################################
           # configure
           #################################
           # setup compiler env vars
           export CC=gcc
           export CXX=g++
           export FC=gfortran
           ${CC} --version
           # capture current path
           export ROOT_DIR=`pwd`
           # find spack generated host config file
           export HOST_CONFIG=`ls ${ROOT_DIR}/uberenv_libs/*.cmake`
           echo $HOST_CONFIG
           # find spack installed cmake
           export CMAKE_BIN_DIR=`ls -d ${ROOT_DIR}/uberenv_libs/spack/opt/spack/*/*/cmake*/bin`
           export PATH=${CMAKE_BIN_DIR}:$PATH
           echo $PATH
           which cmake
           cmake --version
           # prepare build dir
           mkdir build
           cd build
           # setup cmake options
           export CMAKE_OPTS="-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}"
           export CMAKE_OPTS="${CMAKE_OPTS} -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}"
           export CMAKE_OPTS="${CMAKE_OPTS} -DCMAKE_INSTALL_PREFIX=../install"
           # configure
           cmake ${CMAKE_OPTS} -C ${HOST_CONFIG} ../src
        displayName: 'Configure with CMake'

      - script: |
           #################################
           # build
           #################################
           # build
           cd build
           make VERBOSE=1
        displayName: 'Build'

      - script: |
           #################################
           # install
           #################################
           cd build
           make install
        displayName: 'Install'

      - script: |
            #################################
            # check install
            #################################
            ls install
        displayName: 'Check Install'
        failOnStderr: true

  ###############################################################################
  # Docker build and test case, that leverages our script that calls Docker Build
  ###############################################################################
  - job: Docker_Ubuntu
    pool:
      vmImage: 'ubuntu-16.04'
    timeoutInMinutes: 0
    steps:
      - checkout: self
        clean: boolean
        submodules: recursive

      - script: |
          ####################
          # run docker build
          ####################
          cd src/examples/docker/ubuntu/ && ./example_build.sh
        displayName: 'Docker Build'
